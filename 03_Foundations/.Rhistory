ggplot(df, aes(x=factor(id), y=resid)) + stat_smooth(method="lm", formula=y~1)
ggplot(df, aes(x=factor(id), y=resid)) + geom_boxplot() + stat_smooth(method="lm", formula=y~1+0*x)
ggplot(df, aes(x=factor(id), y=resid)) + stat_smooth(method="lm", formula=y~1+0*x)
ggplot(df, aes(x=factor(id), y=resid)) + geom_pointrange() + geom_hline(yintercept=0, color="blue")
ggplot(df, aes(x=factor(id), y=resid)) + stat_summary(fun.data = mean_cl_boot, geom = "pointrange") + geom_hline(yintercept=0, color="blue")
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2)
library(cowplot)
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2)
overall <- ggplot(df, aes(x=1, y=resid)) + stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2)
library(cowplot)
plot_grid(by_subj, overall, nrow=1, align="hv", rel_widths = c(0.2, 0.8))
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2)
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() + # stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2)
library(cowplot)
plot_grid(by_subj, overall, nrow=1, align="hv", rel_widths = c(0.2, 0.8))
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("95% confidence intervals on residuals by subject") +
theme_cowplot()
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall residual distribution") +
theme_cowplot()
library(cowplot)
plot_grid(by_subj, overall, nrow=1, align="hv", rel_widths = c(0.2, 0.8))
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("95% confidence intervals on residuals by subject") +
theme_cowplot()
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall residual distribution") +
theme_cowplot()
library(cowplot)
plot_grid(by_subj, overall, nrow=1, align="hv", rel_widths = c(0.8, 0.2))
range(df$resid)
range(df$resid, na.rm=T)
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("95% confidence intervals on residuals by subject") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme_cowplot()
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall residual distribution") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme_cowplot()
library(cowplot)
plot_grid(by_subj, overall, nrow=1, align="hv", rel_widths = c(0.8, 0.2))
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("95% confidence intervals on residuals by subject") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme(axis.text.x = element_blank()) +
theme_cowplot()
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall residual distribution") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme(axis.text.x = element_blank()) +
theme_cowplot()
library(cowplot)
plot_grid(by_subj, overall, nrow=1, align="hv", rel_widths = c(0.8, 0.2))
if (!require(pacman)) { install.packages("pacman"); library(pacman) }
p_load(knitr, tidyverse, lme4, modelr, lm.beta, ez, emmeans, cowplot)
knitr::opts_chunk$set(echo = TRUE) #print code by default
options(digits=3)
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("95% confidence intervals on residuals by subject") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme(axis.text.x = element_blank()) +
theme_cowplot()
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme(axis.text.x = element_blank()) +
theme_cowplot()
plot_grid(by_subj, overall, nrow=1,rel_widths = c(0.8, 0.2))
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme(axis.text.x = element_blank())
overall
df <- flanker %>% add_residuals(model = lm_fit)
by_subj <- ggplot(df, aes(x=factor(id), y=resid)) +
stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("95% confidence intervals on residuals by subject") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme_cowplot() +
theme(axis.text.x = element_blank())
overall <- ggplot(df, aes(x=1, y=resid)) + geom_boxplot() +
# stat_summary(fun.data = mean_cl_boot, geom = "pointrange") +
geom_hline(yintercept=0, color="blue", size=2) +
ggtitle("Overall") +
labs(x=NULL) + ylim(-1.5, 1.6) +
theme_cowplot() +
theme(axis.text.x = element_blank())
plot_grid(by_subj, overall, nrow=1,rel_widths = c(0.8, 0.2))
detach("package:ez", unload=T)
p_load(knitr, tidyverse, lme4, modelr, lm.beta, afex, emmeans, cowplot)
str(df)
aov_ez(id="id", dv="resid", within = "id")
aov_ez(id="id", dv="resid", within = "id", data=df)
aov_ez(dv="resid", within = "id", data=df)
aov_ez(id="id", dv="resid", within = "clus", data=df %>% mutate(clus=id))
aov_ez(id="id", dv="resid", within = "clus", data=df %>% mutate(clus=id), na.rm=TRUE)
summary(df$resid)
hist(df$resid)
mm <- lm(resid ~ factor(id), df)
summary(mm)
car::Anova(mm, type=3)
?friedman.test
friedman.test(resid ~ factor(id) | id, df)
str(df)
df <- df %>% mutate(id=factor(id))
friedman.test(resid ~ id | id, df)
data=df %>% mutate(clus=id)
df <- df %>% mutate(clus=factor(id))
friedman.test(resid ~ clu | id, df)
friedman.test(resid ~ clus | id, df)
head(df)
View(df)
mm <- lm(resid ~ factor(id), df)
car::Anova(mm, type=3)
library(performance)
?iccc
?ICC
?icc
if (!require(pacman)) { install.packages("pacman"); library(pacman) }
p_load(knitr, tidyverse, lme4, sjstats, lmerTest, sjPlot, sjmisc, viridis)
knitr::opts_chunk$set(echo = TRUE) #print code by default
options(digits=3)
rfx_model <- lmer(resid ~ 1 + (1|id), df)
performance::icc(rfx_model) # .74
friedman.test(resid ~ clus | id, df)
friedman.test(resid ~ clus, df)
friedman.test(resid ~ clus | 1, df)
friedman.test(resid ~ 1 | id, df)
friedman.test(resid ~ clus | id, df)
?aov_ez
?aov_4
aov_4(resid ~ 1 + (1|id), df)
aov_4(resid ~ 1 + (1|id), na.om(df))
aov_4(resid ~ 1 + (1|id), na.omit(df))
aov_4(resid ~ 1 + (id|id), df)
library(coin)
install.packages("coin")
library(coin)
?symmetry_test
# df <- df %>% mutate(clus=factor(id))
# friedman.test(resid ~ clus | id, df)
# aov_ez(id="id", dv="resid", within = "clus", data=df %>% mutate(clus=id), na.rm=TRUE)
symmetry_test(resid ~ 1 | id, df)
symmetry_test(resid ~ clus | id, df)
str(df)
symmetry_test(resid ~ clus | id, df)
symmetry_test(resid ~ clus | 1, df)
mm <- lm(resid ~ factor(id), df)
car::Anova(mm, type=3)
summary(mm)
anova(mm)
1535/2451
1 - 1535/2451
rfx_model <- lmer(resid ~ 1 + (1|id), df)
performance::icc(rfx_model)
car::Anova(mm, type=3)
summary(mm)
res <- df %>%
group_by(id)
res <- df %>%
group_by(id) %>%
nest()
str(res)
str(res, ma=x1)
str(res, max=1)
names(res, max=1)
names(res)
res <- df %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)))
res <- df %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy))
str(res)
str(res$stats)
res <- df %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats)
str(res)
str(res$stat)
names(res)
res <- df %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% select(-test)
select
res <- df %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats)
head(res)
str(flanker)
ggplot(flanker, aes(x=cond, y=rt, color=block)) + geom_boxplot() +
facet_wrap(~id)
str(flanker)
ggplot(flanker %>% filter(id < 20), aes(x=cond, y=rt, color=block)) + geom_boxplot() +
facet_wrap(~id)
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test)
str(res)
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test) %>%
ungroup()
str(res)
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test)
str(res)
#a bit beyond the scope, but at a high level, we use dplyr and broom to run the same RT
#Documentation: https://cran.r-project.org/web/packages/broom/vignettes/broom_and_dplyr.html
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test) %>%
ungroup()
str(res)
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test) %>%
ungroup() %>% group_by(term) %>%
mutate(estimate_termz=as.vector(scale(estimate))) %>%
ungroup()
#a bit beyond the scope, but at a high level, we use dplyr and broom to run the same RT
#Documentation: https://cran.r-project.org/web/packages/broom/vignettes/broom_and_dplyr.html
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test) %>%
ungroup() %>% group_by(term) %>%
mutate(estimate_termz=as.vector(scale(estimate))) %>%
ungroup()
ggplot(res, aes(x=term, y=id, fill=estimate_termz)) + geom_tile() + scale_fill_viridis()
#a bit beyond the scope, but at a high level, we use dplyr and broom to run the same RT
#Documentation: https://cran.r-project.org/web/packages/broom/vignettes/broom_and_dplyr.html
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x, na.action = na.exclude)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test) %>%
ungroup() %>% group_by(term) %>%
mutate(estimate_termz=as.vector(scale(estimate))) %>%
ungroup()
ggplot(res, aes(x=term, y=id, fill=estimate_termz)) + geom_tile() + scale_fill_viridis()
ggplot(res, aes(x=term, y=estimate_termz)) + geom_boxplot()
ggplot(res, aes(x=term, y=estimate)) + geom_boxplot()
ggplot(res, aes(x=term, y=estimate_termz)) + geom_boxplot()
#a bit beyond the scope, but at a high level, we use dplyr and broom to run the same RT
#Documentation: https://cran.r-project.org/web/packages/broom/vignettes/broom_and_dplyr.html
res <- flanker %>%
group_by(id) %>%
nest() %>%
mutate(test=map(data, ~ lm(rt_inv ~ block*cond, .x, na.action = na.exclude)),
stats=map(test, tidy)) %>%
unnest(stats) %>% dplyr::select(-data, -test) %>%
ungroup() %>% group_by(term) %>%
mutate(estimate_termz=as.vector(scale(estimate))) %>%
ungroup()
ggplot(res, aes(x=term, y=id, fill=estimate_termz)) + geom_tile() + scale_fill_viridis()
ggplot(res, aes(x=term, y=estimate_termz)) + geom_boxplot() +
ggtitle("Heterogeneity in within-person model coefficients (z-scored)")
if (!require(pacman)) { install.packages("pacman"); library(pacman) }
p_load(knitr, tidyverse, broom, lme4, modelr, performance, afex, emmeans, cowplot)
knitr::opts_chunk$set(echo = TRUE) #print code by default
options(digits=3)
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
ggtitle("Heterogeneity in within-person model coefficients (z-scored)")
coef(lm_fit)
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
overall
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=3) +
ggtitle("Heterogeneity in within-person model coefficients")
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=3, color="blue", shape=23) +
ggtitle("Heterogeneity in within-person model coefficients")
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=3, color="blue", shape=18) +
ggtitle("Heterogeneity in within-person model coefficients")
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=8, color="blue", shape=18) +
ggtitle("Heterogeneity in within-person model coefficients")
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=6, color="blue", shape=18) +
labs(title="Heterogeneity in within-person model coefficients",
subtitle="Blue diamonds are coefs from overall lm()")
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=6, color="blue", shape=18) +
labs(title="Heterogeneity in within-person model coefficients",
subtitle="Blue diamonds are coefs from overall lm()") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
overall <- data.frame(term=names(coef(lm_fit)), estimate=coef(lm_fit))
ggplot(res, aes(x=1, y=estimate)) + geom_boxplot() + facet_wrap(~term, scales="free") +
geom_point(data=overall, size=6, color="blue", shape=18) +
labs(title="Heterogeneity in within-person model coefficients",
subtitle="Blue diamonds are coefs from overall lm()", x=NULL) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
scale_fill_viridis
mm <- lm(resid ~ factor(id), df)
str(summary(mm))
m1 <- lmer(rt_inv ~ block*cond + (1|id), flanker)
summary(m1)
m1 <- lmer(rt_inv ~ 1 + (1|id), flanker)
summary(m1)
rfx_model <- lmer(rt ~ 1 + (1|id), df)
performance::icc(rfx_model)
lm_fit2 <- lm(rt_inv ~ factor(id), flanker)
summary(lm_fit2)
m1 <- lmer(rt_inv ~ 1 + (1|id), flanker)
summary(m1)
mean(flanker$rt_inv)
mean(flanker$rt_inv, na.rm=T)
print(mean(flanker$rt_inv, na.rm=T), digits=5)
mean(flanker, na.rm=TRUE)
summary(m1)
VarCorr(m1)
ranef(m1)
VarCorr(m1)
str(VarCorr(m1)
str(VarCorr(m1))
str(VarCorr(m1)))
str(VarCorr(m1))
vc <- VarCorr(m1)
print(vc,comp=c("Variance"))
as.data.frame(vc)
dd <- as.data.frame(vc)
str(dd)
dd <- as.matrix(vc)
dd
.303/(.303+.388)
ICC_by_hand <- dd$vcov[dd$grp=="id"] / (dd$vcov[dd$grp=="id"] + dd$vcov[dd$grp=="Residual"])
ICC_by_hand
dd$vcov[dd$grp=="id"]
dd <- as.data.frame(vc)
ICC_by_hand <- dd$vcov[dd$grp=="id"] / (dd$vcov[dd$grp=="id"] + dd$vcov[dd$grp=="Residual"])
ICC_by_hand
performance::icc(m1)
#helper function
performance::icc(m1)
m2 <- lmer(rt_inv ~ block*cond + (1|id), flanker)
summary(m2)
library(insight)
library(lme4)
data(sleepstudy)
m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)
get_variance(m)
get_variance_fixed(m)
get_variance_residual(m)
library(lme4)
data(sleepstudy)
m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)
get_variance(m)
get_variance_fixed(m)
get_variance(m)
library(lme4)
data(sleepstudy)
m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)
get_variance(m)
get_variance_fixed(m)
str(get_variance(m))
get_variance
v2 <- as.data.frame(get_variance(m2, component="random"))
v2
v2 <- as.data.frame(get_variance(m2))
v2
summary(m2)
?get_variance
v2 <- as.data.frame(get_variance(m2, c("fixed", "random", "residual")))
v2 <- as.data.frame(get_variance(m2, component = c("fixed", "random", "residual")))
as.data.frame(get_variance(m2))
as.data.frame(get_variance(m2, "fixed"))
as.data.frame(get_variance(m2, c("fixed", "random")))
as.data.frame(get_variance(m2, "random"))
as.data.frame(get_variance(m2, "intercept"))
v2 <- as.data.frame(get_variance(m2)) %>% mutate(model="random intercept cond+block") %>%
dplyr::select(-var.dispersion)
v2
m2 <- lmer(rt_inv ~ block*cond + (1|id), flanker)
summary(m2)
v2 <- as.data.frame(get_variance(m2)) %>% mutate(model="random intercept cond+block") %>%
dplyr::select(model, var.fixed, var.intercept, var.residual)
v2
if (!require(pacman)) { install.packages("pacman"); library(pacman) }
p_load(knitr, tidyverse, broom, lme4, modelr, performance, afex, emmeans, cowplot, insight)
knitr::opts_chunk$set(echo = TRUE) #print code by default
options(digits=3)
m1 <- lmer(rt_inv ~ 1 + (1|id), flanker)
summary(m1)
mean(flanker$rt_inv, na.rm=TRUE)
#store variance components
v1 <- as.data.frame(get_variance(m1)) %>% mutate(model="unconditional random intercept") %>%
dplyr::select(model, var.fixed, var.intercept, var.residual)
rbind(v1, v2)
cbind(v1, v2)
v1
vc_combo <- v1 %>% pivot_longer(-model)
vc_combo
v1_long <-  v1 %>% pivot_longer(-model) %>% rename(value.unconditional=value) %>% select(-model)
v1_long <-  v1 %>% pivot_longer(-model) %>% rename(value.unconditional=value) %>% dplyr::select(-model)
v1_long
v1_long <-  v1 %>% pivot_longer(-model) %>% rename(value.unconditional = value) %>% dplyr::select(-model)
v2_long <-  v2 %>% pivot_longer(-model) %>% rename(value.addfixed = value) %>% dplyr::select(-model)
v1_long %>% left_join(v2_long) %>% mutate(re.change=value.addfixed/value.unconditional)
v1_long %>% left_join(v2_long) %>% mutate(re.change=1 - value.addfixed/value.unconditional)
v1_long %>% left_join(v2_long) %>% mutate(re.change.pct=(1 - value.addfixed/value.unconditional)*100)
v1_long <-  v1 %>% pivot_longer(-model) %>% rename(value.unconditional = value) %>% dplyr::select(-model)
v2_long <-  v2 %>% pivot_longer(-model) %>% rename(value.addfixed = value) %>% dplyr::select(-model)
v1_long %>% left_join(v2_long) %>% mutate(re.change.pct=(1 - value.addfixed/value.unconditional)*100) %>%
kable(digits=2)
extract_random_effects
library(merTools)
install.packages("merTools")
library(merTools)
predictInterval(m2)   # for various model predictions, possibly with new data
REsim(m2)             # mean, median and sd of the random effect estimates
plotREsim(REsim(m2))  # plot the interval estimates
if (!require(pacman)) { install.packages("pacman"); library(pacman) }
p_load(knitr, tidyverse, broom, lme4, modelr, performance, afex, emmeans, cowplot, insight, merTools)
knitr::opts_chunk$set(echo = TRUE) #print code by default
options(digits=3)
ranef(m2)
res <- ranef(m2)$id
lattice::histogram(res$`(Intercept)`)
?histogram
m3 <- lmer(rt_inv ~ block*cond + (1 + cond |id), flanker)
summary(m3)
m3 <- lmer(rt_inv ~ block*cond + (1 + cond |id), flanker)
summary(m3)
print(as.data.frame(get_variance(m3)))
m3 <- lmer(rt_inv ~ block*cond + (1 + cond |id), flanker)
summary(m3)
print(as.data.frame(get_variance(m3)))
simranef3 <- REsim(m3)  # mean, median and sd of the random effect estimates
simranef3 %>% head()
plotREsim(simranef3)  + facet_wrap(scales="free") # plot the interval estimates
str(plotREsim(simranef3))
plotREsim(simranef3)  + facet_wrap(~term, scales="free") # plot the interval estimates
